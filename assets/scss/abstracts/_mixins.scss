/* transition mixin */
@mixin add-transition($property: color, $duration: 0.3s, $timing-function: ease-out) {
  transition: $property $duration $timing-function;
}

/* text mixin */
@mixin article-text(
  $noOfLine: 2,
  $fontSize: 1.6rem,
  $lineHeight: 0.7rem,
  $fontWeight: 400,
  $color: $white-clr
) {
  color: $color;
  font-size: $fontSize;
  font-weight: $fontWeight;
  line-height: $fontSize + $lineHeight;
  max-height: ($fontSize + $lineHeight) * $noOfLine;
  overflow: hidden;
  display: -webkit-box;
  text-transform: capitalize;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $noOfLine;
  text-overflow: ellipsis;
}

@mixin minimal-article-text($fontSize: 1.6rem, $lineHeight: 0.7rem, $noOfLines: 2) {
  font-size: $fontSize;
  line-height: $fontSize + $lineHeight;
  max-height: ($fontSize + $lineHeight) * $noOfLines;
}

/* media-query mixin */
@mixin respond-to-custom($breakpoint) {
  @media only screen and (max-width: $breakpoint) {
    @content;
  }
}

@mixin respond-from-custom($breakpoint) {
  @media only screen and (min-width: $breakpoint) {
    @content;
  }
}

@function get-breakpoints() {
  $breakpoint-list: '';
  @each $breakpoint, $value in $breakpoints {
    $breakpoint-list: $breakpoint-list + ' ' + $breakpoint;
  }
  @return $breakpoint-list;
}

@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media only screen and (max-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @error 'Invalid breakpoint: #{$breakpoint}. Valid breakpoints are:' + get-breakpoints();
  }
}

@mixin respond-from($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media only screen and (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @error 'Invalid breakpoint: #{$breakpoint}. Valid breakpoints are:' + get-breakpoints();
  }
}
